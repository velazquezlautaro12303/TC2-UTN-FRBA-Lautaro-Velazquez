{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### TP1 ME1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Valor Verdadero      Valor Medido         Desviacion           Incertidumbre Expandida   Valor Nominal        Valor Escala         Factor de Expansion  Verifica        U_j                 \n",
      "0.010833             0.010760             -0.000073            0.000151                  0.010000             0.200000             2.000000             Si              0.000554            \n",
      "0.050346             0.095690             0.045344             0.045368                  0.050000             0.200000             2.000000             No              0.000978            \n",
      "0.049975             0.049000             -0.000975            0.000014                  0.050000             2.000000             2.000000             Si              0.005245            \n",
      "0.049382             0.040000             -0.009382            0.000019                  0.050000             20.000000            2.000000             Si              0.050200            \n",
      "0.099083             0.099170             0.000087             0.000086                  0.100000             0.200000             2.000000             Si              0.000996            \n",
      "0.101520             0.101000             -0.000520            0.000096                  0.100000             2.000000             2.000000             Si              0.005505            \n",
      "0.102243             0.090000             -0.012243            0.000104                  0.100000             20.000000            2.000000             Si              0.050450            \n",
      "1.201030             1.209100             0.008070             0.003102                  1.000000             2.000000             2.000000             Si              0.011045            \n",
      "1.178752             1.159000             -0.019752            0.017817                  1.000000             20.000000            2.000000             Si              0.055795            \n",
      "2.067252             1.911000             -0.156252            1.271667                  1.000000             1000.000000          2.000000             Si              2.509555            \n",
      "10.049718            10.096000            0.046282             0.010808                  10.000000            20.000000            2.000000             Si              0.100480            \n",
      "10.052220            9.900000             -0.152220            0.100468                  10.000000            200.000000           2.000000             Si              0.549500            \n",
      "11.629100            10.610000            -1.019100            2.195704                  10.000000            1000.000000          2.000000             Si              2.553050            \n",
      "25.063640            25.090000            0.026360             0.010391                  25.000000            200.000000           2.000000             Si              0.625450            \n",
      "25.038889            25.000000            -0.038889            0.000401                  25.000000            1000.000000          2.000000             Si              2.625000            \n",
      "\n",
      "Valor Verdadero      Valor Medido         Desviacion           Incertidumbre Expandida   Valor Nominal        Valor Escala         Factor de Expansion  Verifica        U_j                 \n",
      "0.010833             0.011900             0.001067             0.000162                  0.010000             0.200000             2.000000             Si              0.000559            \n",
      "0.050346             0.049600             -0.000746            0.000004                  0.050000             0.200000             2.000000             Si              0.000748            \n",
      "0.049975             0.048000             -0.001975            0.000014                  0.050000             2.000000             2.000000             Si              0.005240            \n",
      "0.049382             0.040000             -0.009382            0.000019                  0.050000             20.000000            2.000000             Si              0.050200            \n",
      "0.099083             0.097740             -0.001343            0.000056                  0.100000             0.200000             2.000000             Si              0.000989            \n",
      "0.101520             0.098900             -0.002620            0.000139                  0.100000             2.000000             2.000000             Si              0.005495            \n",
      "0.102243             0.091000             -0.011243            0.001005                  0.100000             20.000000            2.000000             Si              0.050455            \n",
      "1.201030             1.183500             -0.017530            0.003072                  1.000000             2.000000             2.000000             Si              0.010918            \n",
      "1.178752             1.134000             -0.044752            0.015026                  1.000000             20.000000            2.000000             Si              0.055670            \n",
      "2.067252             1.888000             -0.179252            1.255293                  1.000000             1000.000000          2.000000             Si              2.509440            \n",
      "10.049718            9.872000             -0.177718            0.008050                  10.000000            20.000000            2.000000             Si              0.099360            \n",
      "10.052220            9.720000             -0.332220            0.080584                  10.000000            200.000000           2.000000             Si              0.548600            \n",
      "11.629100            10.570000            -1.059100            2.166545                  10.000000            1000.000000          2.000000             Si              2.552850            \n",
      "25.063640            24.550000            -0.513640            0.061978                  25.000000            200.000000           2.000000             Si              0.622750            \n",
      "25.038889            24.000000            -1.038889            0.000401                  25.000000            1000.000000          2.000000             Si              2.620000            \n",
      "\n"
     ]
    }
   ],
   "source": [
    "# -*- coding: utf-8 -*-\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import ipywidgets as widgets\n",
    "# import openpyxl\n",
    "\n",
    "# Crear un nuevo libro de trabajo\n",
    "# wb = openpyxl.Workbook()\n",
    "\n",
    "# Seleccionar la hoja activa (por defecto es la primera hoja)\n",
    "# hoja = wb.active\n",
    "\n",
    "# Especifica la ruta de tu archivo Excel\n",
    "ruta_archivo = 'TP1_Medidas1.xlsx'\n",
    "\n",
    "# Lee el archivo Excel en un DataFrame de pandas\n",
    "datos = pd.read_excel(ruta_archivo)\n",
    "\n",
    "# Especifica el tamaño del chunk (10 en este caso)\n",
    "tamaño_chunk = 10\n",
    "\n",
    "format1 = \"%-20s %-20s %-20s %-25s %-20s %-20s %-20s %-15s %-20s\"\n",
    "format2 = \"%-20f %-20f %-20f %-25f %-20f %-20f %-20f %-15s %-20f\"\n",
    "\n",
    "ERROR_LECTURA_HB113C = .5\n",
    "ERROR_CUENTAS_HB113C =  5\n",
    "CANT_MAX_CUENTAS = 2000\n",
    "K = 2\n",
    "\n",
    "for k in [0,1]:\n",
    "\n",
    "    # hoja['A%i' % (k*20)] = \"Valor Verdadero\"\n",
    "    # hoja['B%i' % (k*20)] = \"Valor Medido\"\n",
    "    # hoja['C%i' % (k*20)] = \"Desviacion\"\n",
    "    # hoja['D%i' % (k*20)] = \"Incertidumbre Expandida\"\n",
    "    # hoja['E%i' % (k*20)] = \"Valor Nominal\"\n",
    "    # hoja['F%i' % (k*20)] = \"Valor Escala\"\n",
    "    # hoja['G%i' % (k*20)] = \"Factor de Expansion\"\n",
    "    # hoja['H%i' % (k*20)] = \"Verifica\"\n",
    "    # hoja['I%i' % (k*20)] = \"U_j\"\n",
    "    \n",
    "    print(format1 % (\"Valor Verdadero\", \"Valor Medido\", \"Desviacion\", \"Incertidumbre Expandida\", \"Valor Nominal\", \"Valor Escala\", \"Factor de Expansion\", \"Verifica\", \"U_j\"))\n",
    "        \n",
    "    # Itera sobre el rango de índices en grupos de 10\n",
    "    for i in range(0, len(datos), tamaño_chunk):\n",
    "        \n",
    "        valorPatron  = datos.iloc[i:i+tamaño_chunk, 0]\n",
    "        valorMedido1 = datos.iloc[i:i+tamaño_chunk, k+1]\n",
    "        valorNominal = datos.iloc[i, 3]\n",
    "        valorEscala  = datos.iloc[i, 4]\n",
    "        \n",
    "        ERROR_VOLT_X_CUENTA_HB113C = valorEscala / CANT_MAX_CUENTAS\n",
    "\n",
    "        u_j_HB113C = (ERROR_LECTURA_HB113C / 100) * valorMedido1.mean() + ERROR_VOLT_X_CUENTA_HB113C * ERROR_CUENTAS_HB113C\n",
    "\n",
    "        desviacion = valorMedido1.mean() - valorPatron.mean()\n",
    "        u_i = valorMedido1.std(ddof=1)/np.sqrt(10)\n",
    "        incertidumbre_expandida = np.sqrt(u_i**2 + (valorPatron.std(ddof=1)/np.sqrt(10))**2)\n",
    "\n",
    "        verifica = \"Si\" if (incertidumbre_expandida <= u_j_HB113C) else \"No\"\n",
    "\n",
    "        print (format2 % (valorPatron.mean(), valorMedido1.mean(), desviacion, incertidumbre_expandida, valorNominal, valorEscala, K, verifica, u_j_HB113C))\n",
    "\n",
    "        # output = output + format2 % (valorPatron.mean(), valorMedido1.mean(), desviacion, incertidumbre_expandida, valorNominal, valorEscala, K, verifica, u_j_HB113C)\n",
    "\n",
    "        # hoja['A%i' % (i/10 + 2 + k*20)] = valorPatron.mean()\n",
    "        # hoja['B%i' % (i/10 + 2 + k*20)] = valorMedido1.mean()\n",
    "        # hoja['C%i' % (i/10 + 2 + k*20)] = desviacion\n",
    "        # hoja['D%i' % (i/10 + 2 + k*20)] = incertidumbre_expandida\n",
    "        # hoja['E%i' % (i/10 + 2 + k*20)] = valorNominal\n",
    "        # hoja['F%i' % (i/10 + 2 + k*20)] = valorEscala\n",
    "        # hoja['G%i' % (i/10 + 2 + k*20)] = K\n",
    "        # hoja['H%i' % (i/10 + 2 + k*20)] = verifica\n",
    "        # hoja['I%i' % (i/10 + 2 + k*20)] = u_j_HB113C\n",
    "    \n",
    "    print()\n",
    "\n",
    "# Crear un deslizador\n",
    "# slider = widgets.IntSlider(min=0, max=len(output)-1, step=1, description='Índice de salida:')\n",
    "\n",
    "# Guardar el libro de trabajo\n",
    "# wb.save('archivo_excel.xlsx')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
